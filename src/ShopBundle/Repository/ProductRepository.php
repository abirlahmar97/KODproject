<?php

namespace ShopBundle\Repository;

/**
 * ProductRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ProductRepository extends \Doctrine\ORM\EntityRepository
{
    public function findArray($array)
    {
        $qb = $this->createQueryBuilder('p')
            ->Select('p')
            ->Where('p.id IN (:array)')
            ->setParameter('array', $array);
        return $qb->getQuery()->getResult();
    }

    public function byCategory($category)
    {
        $qb = $this->createQueryBuilder('p')
            ->select('p')
            ->where('p.category = :category')
            ->andWhere('p.available = 1')
            ->andWhere('p.quantity > 0')
            ->orderBy('p.id')
            ->setParameter('category', $category);
        return $qb->getQuery()->getResult();
    }

    public function search($category,$age, $gender, $pmin, $pmax)
    {
        $qb = $this->createQueryBuilder('p')
            ->leftJoin('p.category', 'c');
        if ($age != 0)
            $qb->where("p.age = :age")
                ->setParameter("age", $age);
        else
            $qb->where("p.age LIKE :age ")
                ->setParameter('age', "_");
        if ($gender != 2)
            $qb->andWhere("p.gender = :gender")
                ->setParameter("gender", $gender);
        else
            $qb->andWhere("p.gender LIKE :gender")
                ->setParameter('gender', "_");
        $qb->andWhere("p.price >= :pmin")
            ->andWhere("p.price <= :pmax")
            ->andWhere('p.available = 1')
            ->andWhere('p.quantity > 0')
            ->andWhere('c.id = :id')
            ->setParameter("pmax", (int)$pmax)
            ->setParameter("pmin", (int)$pmin)
            ->setParameter('id', $category);
        return $qb->getQuery()->getResult();

    }

    public function searchProduct($name, $category){
        $qb = $this->createQueryBuilder('p')
            ->leftJoin('p.category', 'c')
            ->where('p.name like :name')
            ->setParameter(':name',"%$name%")
            ->andWhere('p.available = 1')
            ->andWhere('p.quantity > 0')
            ->andWhere('c.id = :id')
            ->setParameter('id', $category);
        return $qb->getQuery()->getResult();

    }

    public function findAvailable(){
        $qb = $this->createQueryBuilder("p")
            ->where("p.available = 1")
            ->andWhere("p.quantity > 0");
        return $qb->getQuery()->getResult();
    }

    public function findForProvider($id){
        $qb = $this->createQueryBuilder('p')
            ->leftJoin('p.user', 'u')
            ->where('u.id = :id')
            ->setParameter('id', $id);
        return $qb->getQuery()->getResult();
    }
}